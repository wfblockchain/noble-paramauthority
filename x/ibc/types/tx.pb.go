// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos2/ibc/core/client/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/x/upgrade/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgClientUpdate is request type for the Query/Params RPC method.
type MsgClientUpdate struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// the client identifier for the client to be updated if the proposal passes
	SubjectClientId string `protobuf:"bytes,2,opt,name=subject_client_id,json=subjectClientId,proto3" json:"subject_client_id,omitempty" yaml:"subject_client_id"`
	// the substitute client identifier for the client standing in for the subject
	// client
	SubstituteClientId string `protobuf:"bytes,3,opt,name=substitute_client_id,json=substituteClientId,proto3" json:"substitute_client_id,omitempty" yaml:"substitute_client_id"`
}

func (m *MsgClientUpdate) Reset()         { *m = MsgClientUpdate{} }
func (m *MsgClientUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgClientUpdate) ProtoMessage()    {}
func (*MsgClientUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d06db783632b73, []int{0}
}
func (m *MsgClientUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClientUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClientUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClientUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClientUpdate.Merge(m, src)
}
func (m *MsgClientUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgClientUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClientUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClientUpdate proto.InternalMessageInfo

// MsgClientUpdateResponse is response type for the Query/Params RPC method.
type MsgClientUpdateResponse struct {
}

func (m *MsgClientUpdateResponse) Reset()         { *m = MsgClientUpdateResponse{} }
func (m *MsgClientUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClientUpdateResponse) ProtoMessage()    {}
func (*MsgClientUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d06db783632b73, []int{1}
}
func (m *MsgClientUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClientUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClientUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClientUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClientUpdateResponse.Merge(m, src)
}
func (m *MsgClientUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClientUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClientUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClientUpdateResponse proto.InternalMessageInfo

// MsgUpgrade is request type for the Query/Params RPC method.
type MsgUpgrade struct {
	Authority string     `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Plan      types.Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan"`
	// An UpgradedClientState must be provided to perform an IBC breaking upgrade.
	// This will make the chain commit to the correct upgraded (self) client state
	// before the upgrade occurs, so that connecting chains can verify that the
	// new upgraded client is valid by verifying a proof on the previous version
	// of the chain. This will allow IBC connections to persist smoothly across
	// planned chain upgrades
	UpgradedClientState *types1.Any `protobuf:"bytes,3,opt,name=upgraded_client_state,json=upgradedClientState,proto3" json:"upgraded_client_state,omitempty" yaml:"upgraded_client_state"`
}

func (m *MsgUpgrade) Reset()         { *m = MsgUpgrade{} }
func (m *MsgUpgrade) String() string { return proto.CompactTextString(m) }
func (*MsgUpgrade) ProtoMessage()    {}
func (*MsgUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d06db783632b73, []int{2}
}
func (m *MsgUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgrade.Merge(m, src)
}
func (m *MsgUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgrade proto.InternalMessageInfo

func (m *MsgUpgrade) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpgrade) GetPlan() types.Plan {
	if m != nil {
		return m.Plan
	}
	return types.Plan{}
}

func (m *MsgUpgrade) GetUpgradedClientState() *types1.Any {
	if m != nil {
		return m.UpgradedClientState
	}
	return nil
}

// MsgUpgradeResponse is response type for the Query/Params RPC method.
type MsgUpgradeResponse struct {
}

func (m *MsgUpgradeResponse) Reset()         { *m = MsgUpgradeResponse{} }
func (m *MsgUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeResponse) ProtoMessage()    {}
func (*MsgUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6d06db783632b73, []int{3}
}
func (m *MsgUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeResponse.Merge(m, src)
}
func (m *MsgUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClientUpdate)(nil), "cosmos2.ibc.core.client.v1.MsgClientUpdate")
	proto.RegisterType((*MsgClientUpdateResponse)(nil), "cosmos2.ibc.core.client.v1.MsgClientUpdateResponse")
	proto.RegisterType((*MsgUpgrade)(nil), "cosmos2.ibc.core.client.v1.MsgUpgrade")
	proto.RegisterType((*MsgUpgradeResponse)(nil), "cosmos2.ibc.core.client.v1.MsgUpgradeResponse")
}

func init() {
	proto.RegisterFile("cosmos2/ibc/core/client/v1/tx.proto", fileDescriptor_b6d06db783632b73)
}

var fileDescriptor_b6d06db783632b73 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x1b, 0x56, 0x81, 0xe6, 0x21, 0x4d, 0x98, 0x22, 0xba, 0x50, 0x25, 0x53, 0x40, 0x08,
	0x09, 0x61, 0xab, 0x9d, 0x84, 0xd0, 0x6e, 0x94, 0x0b, 0x1c, 0x2a, 0x41, 0xd0, 0x2e, 0x5c, 0x26,
	0xdb, 0xf1, 0xdc, 0x8c, 0x34, 0x8e, 0x62, 0xa7, 0x2c, 0x6f, 0xc0, 0x91, 0x47, 0xe0, 0x71, 0x76,
	0x42, 0x13, 0x27, 0xc4, 0xa1, 0x42, 0xed, 0x1b, 0xf4, 0x09, 0x50, 0xed, 0x78, 0x85, 0x0d, 0x34,
	0xb8, 0xc5, 0x5f, 0x7e, 0xdf, 0xf7, 0xf9, 0xff, 0xff, 0x27, 0xe0, 0x3e, 0x93, 0x6a, 0x22, 0xd5,
	0x00, 0xa7, 0x94, 0x61, 0x26, 0x4b, 0x8e, 0x59, 0x96, 0xf2, 0x5c, 0xe3, 0x69, 0x1f, 0xeb, 0x13,
	0x54, 0x94, 0x52, 0x4b, 0xe8, 0x37, 0x10, 0x4a, 0x29, 0x43, 0x2b, 0x08, 0x59, 0x08, 0x4d, 0xfb,
	0x7e, 0x47, 0x48, 0x21, 0x0d, 0x86, 0x57, 0x4f, 0xb6, 0xc3, 0xdf, 0x11, 0x52, 0x8a, 0x8c, 0x63,
	0x73, 0xa2, 0xd5, 0x11, 0x26, 0x79, 0xdd, 0xbc, 0x7a, 0x60, 0x87, 0xe1, 0xaa, 0x10, 0x25, 0x49,
	0x38, 0x9e, 0xf6, 0x29, 0xd7, 0xa4, 0xef, 0xce, 0x96, 0x8a, 0xbe, 0x7a, 0x60, 0x7b, 0xa4, 0xc4,
	0x0b, 0xb3, 0xe7, 0xa0, 0x48, 0x88, 0xe6, 0xb0, 0x07, 0x36, 0x49, 0xa5, 0xc7, 0xb2, 0x4c, 0x75,
	0xdd, 0xf5, 0x76, 0xbd, 0x47, 0x9b, 0xf1, 0xba, 0x00, 0x5f, 0x82, 0x5b, 0xaa, 0xa2, 0xc7, 0x9c,
	0xe9, 0x43, 0x7b, 0xbb, 0xc3, 0x34, 0xe9, 0x5e, 0x5b, 0x51, 0xc3, 0xde, 0x72, 0x16, 0x76, 0x6b,
	0x32, 0xc9, 0xf6, 0xa3, 0x4b, 0x48, 0x14, 0x6f, 0x37, 0x35, 0xbb, 0xeb, 0x55, 0x02, 0xdf, 0x80,
	0x8e, 0xaa, 0xa8, 0xd2, 0xa9, 0xae, 0x34, 0xff, 0x65, 0xd8, 0x86, 0x19, 0x16, 0x2e, 0x67, 0xe1,
	0xbd, 0xf3, 0x61, 0x97, 0xa8, 0x28, 0x86, 0xeb, 0xb2, 0x1b, 0xb9, 0xdf, 0xfe, 0xf8, 0x39, 0x6c,
	0x45, 0x3b, 0xe0, 0xee, 0x05, 0x4d, 0x31, 0x57, 0x85, 0xcc, 0x15, 0x8f, 0xbe, 0x78, 0x00, 0x8c,
	0x94, 0x38, 0xb0, 0x26, 0x5c, 0x21, 0xf5, 0x29, 0x68, 0x17, 0x19, 0xc9, 0x8d, 0xba, 0xad, 0x41,
	0x0f, 0x59, 0x47, 0x91, 0x73, 0xb0, 0x71, 0x14, 0xbd, 0xce, 0x48, 0x3e, 0x6c, 0x9f, 0xce, 0xc2,
	0x56, 0x6c, 0x78, 0x78, 0x0c, 0xee, 0x34, 0x4c, 0xe2, 0x2e, 0xac, 0x34, 0xd1, 0xdc, 0x28, 0xdb,
	0x1a, 0x74, 0x90, 0x4d, 0x0d, 0xb9, 0xd4, 0xd0, 0xf3, 0xbc, 0x1e, 0xee, 0x2e, 0x67, 0x61, 0xcf,
	0xea, 0xfd, 0x63, 0x73, 0x14, 0xdf, 0x76, 0x75, 0xab, 0xec, 0xad, 0xa9, 0x76, 0x00, 0x5c, 0xeb,
	0x71, 0x32, 0x07, 0xdf, 0x3d, 0xb0, 0x31, 0x52, 0x02, 0x16, 0xe0, 0xe6, 0x6f, 0xd1, 0x3e, 0x46,
	0x7f, 0xff, 0xc4, 0xd0, 0x05, 0xcf, 0xfc, 0xbd, 0xff, 0x80, 0xdd, 0x66, 0x48, 0xc0, 0x0d, 0x67,
	0xee, 0xc3, 0x2b, 0xfa, 0x1b, 0xce, 0x47, 0xff, 0xc6, 0xb9, 0x15, 0xc3, 0xf8, 0x74, 0x1e, 0x78,
	0x67, 0xf3, 0xc0, 0xfb, 0x31, 0x0f, 0xbc, 0x4f, 0x8b, 0xa0, 0x75, 0xb6, 0x08, 0x5a, 0xdf, 0x16,
	0x41, 0xeb, 0xdd, 0x33, 0x91, 0xea, 0x71, 0x45, 0x11, 0x93, 0x13, 0xfc, 0xe1, 0x88, 0x66, 0x92,
	0xbd, 0x67, 0x63, 0x92, 0xe6, 0x38, 0x97, 0x34, 0xe3, 0x4f, 0x0a, 0x52, 0x92, 0xc9, 0x79, 0xbc,
	0xf8, 0xc4, 0xfc, 0x8c, 0xba, 0x2e, 0xb8, 0xa2, 0xd7, 0x4d, 0x16, 0x7b, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x9e, 0xe0, 0xcd, 0xdf, 0xa8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ClientUpdate(ctx context.Context, in *MsgClientUpdate, opts ...grpc.CallOption) (*MsgClientUpdateResponse, error)
	Upgrade(ctx context.Context, in *MsgUpgrade, opts ...grpc.CallOption) (*MsgUpgradeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClientUpdate(ctx context.Context, in *MsgClientUpdate, opts ...grpc.CallOption) (*MsgClientUpdateResponse, error) {
	out := new(MsgClientUpdateResponse)
	err := c.cc.Invoke(ctx, "/cosmos2.ibc.core.client.v1.Msg/ClientUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Upgrade(ctx context.Context, in *MsgUpgrade, opts ...grpc.CallOption) (*MsgUpgradeResponse, error) {
	out := new(MsgUpgradeResponse)
	err := c.cc.Invoke(ctx, "/cosmos2.ibc.core.client.v1.Msg/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ClientUpdate(context.Context, *MsgClientUpdate) (*MsgClientUpdateResponse, error)
	Upgrade(context.Context, *MsgUpgrade) (*MsgUpgradeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClientUpdate(ctx context.Context, req *MsgClientUpdate) (*MsgClientUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUpdate not implemented")
}
func (*UnimplementedMsgServer) Upgrade(ctx context.Context, req *MsgUpgrade) (*MsgUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClientUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClientUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClientUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos2.ibc.core.client.v1.Msg/ClientUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClientUpdate(ctx, req.(*MsgClientUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos2.ibc.core.client.v1.Msg/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Upgrade(ctx, req.(*MsgUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos2.ibc.core.client.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientUpdate",
			Handler:    _Msg_ClientUpdate_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Msg_Upgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos2/ibc/core/client/v1/tx.proto",
}

func (m *MsgClientUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClientUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClientUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubstituteClientId) > 0 {
		i -= len(m.SubstituteClientId)
		copy(dAtA[i:], m.SubstituteClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubstituteClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectClientId) > 0 {
		i -= len(m.SubjectClientId)
		copy(dAtA[i:], m.SubjectClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClientUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClientUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClientUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpgradedClientState != nil {
		{
			size, err := m.UpgradedClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClientUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubstituteClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClientUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Plan.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.UpgradedClientState != nil {
		l = m.UpgradedClientState.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClientUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClientUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClientUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstituteClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubstituteClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClientUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClientUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClientUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradedClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradedClientState == nil {
				m.UpgradedClientState = &types1.Any{}
			}
			if err := m.UpgradedClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
